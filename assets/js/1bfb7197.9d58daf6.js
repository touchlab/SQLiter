"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[915],{8170:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return c},default:function(){return g},frontMatter:function(){return r},metadata:function(){return l},toc:function(){return d}});var a=t(7462),i=t(3366),o=(t(7294),t(3905)),s=(t(8766),t(5710),["components"]),r={slug:"/usage",sidebar_position:2,title:"Usage"},c="SQLiter",l={unversionedId:"usage/index",id:"usage/index",title:"Usage",description:"Usage",source:"@site/docs/usage/index.mdx",sourceDirName:"usage",slug:"/usage",permalink:"/SQLiter/usage",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/usage/index.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{slug:"/usage",sidebar_position:2,title:"Usage"},sidebar:"mainSidebar",previous:{title:"Getting Started",permalink:"/SQLiter/"},next:{title:"Connection Configuration",permalink:"/SQLiter/usage/configuration"}},u={},d=[{value:"Usage",id:"usage",level:2},{value:"Open a connection (file based DB)",id:"open-a-connection-file-based-db",level:3},{value:"Open a connection (in-memory DB)",id:"open-a-connection-in-memory-db",level:3},{value:"Execute a query",id:"execute-a-query",level:3}],m={toc:d};function g(e){var n=e.components,t=(0,i.Z)(e,s);return(0,o.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"sqliter"},"SQLiter"),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("h3",{id:"open-a-connection-file-based-db"},"Open a connection (file based DB)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'// open a very basic connection\nval config = DatabaseConfiguration("my-database.db", 1, { db -> ... })\nval manager = createDatabaseManager(config)\nval connection = manager.createMultiThreadedConnection()\n\n// execute sql queries\n\n// don\'t forget to close the connection\nconnection.close()\n')),(0,o.kt)("h3",{id:"open-a-connection-in-memory-db"},"Open a connection (in-memory DB)"),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Why do in-memory databases need names?")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"If you pass in a name you need to manage the connections, just like any other database, but if you pass a value of ",(0,o.kt)("inlineCode",{parentName:"p"},"null"),"\nthen SQLiter will auto-assign the name ",(0,o.kt)("inlineCode",{parentName:"p"},":memory:")," and the connection should auto-close when you disconnect."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"// open a very basic connection\nval config = DatabaseConfiguration(\n    name = null,\n    inMemory = true,\n    version = 1,\n    create = { db -> ... }\n)\nval manager = createDatabaseManager(config)\nval connection = manager.createMultiThreadedConnection()\n\n// execute sql queries\n\n// don't forget to close the connection\nconnection.close()\n")),(0,o.kt)("h3",{id:"execute-a-query"},"Execute a query"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Insert data"',title:'"Insert','data"':!0},'connection.withStatement("insert into test(num, str) values (?,?)") {\n    bindLong(1, id)\n    bindString(2, str)\n    executeInsert()\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Query data"',title:'"Query','data"':!0},'connection.withStatement("select * from test where num = ?") {\n    bindLong(1, id)\n    query().iterator().next().let {\n        val dbVal = it.values.get(1).second as String\n\n        ...\n    }\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="Delete data"',title:'"Delete','data"':!0},'val statement = connection.createStatement("DELETE FROM test")\nstatement.execute()\n\n// Verify that the deletion processed\nassertEquals(0, connection.longForQuery("select count(*) from test"))\nstatement.finalizeStatement()\n')))}g.isMDXComponent=!0}}]);