/*
 * Copyright 2010-2017 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.jetbrains.kotlin.CompileCppToBitcode

// TODO: consider using some Gradle plugins to build and test

targetList.each { targetName ->
    if(isValidTarget(targetName)) {
        task("${targetName}TLRuntime", type: CompileCppToBitcode) {
            name "tlruntime"
            srcRoot file('src/main')
            target targetName
            if (!isWindows()) {
                compilerArgs '-fPIC'
            } else {
                // When compiling on windows you need to have installed msys2, then use that to install sqlite3
                compilerArgs '-Ic:\\msys64\\mingw64\\include'
            }
            compilerArgs '-I' + project.file("${konanPath}/common/src/hash/headers")
            compilerArgs '-I' + project.file("${konanPath}/runtime/src/main/cpp")
            if (rootProject.hasProperty("${targetName}LibffiDir"))
                compilerArgs '-I' + project.file(rootProject.ext.get("${targetName}LibffiDir") + "/include")
        }
    }
}

boolean isValidTarget(targetName){
    return (isWindows() && targetName.contains("mingw")) ||
        (!isWindows()
            && (
            targetName.contains("ios")
                || targetName.contains("macos")
                || targetName.contains("watchos")
                || targetName.contains("tvos")
        ))
}

task distTlRuntime(type: Copy) {
    dependsOn.addAll(targetList.findAll {
      println("is valid ${it}, ${isValidTarget(it)}")
      isValidTarget(it)
    }
             .collect { "${it}TLRuntime" })
}

//task knRepo {
//    doLast {
//        File zipFile = new File(buildDir, "kndist.zip")
//        new DistroHelper().downloadKotlinNativeDistro("https://github.com/JetBrains/kotlin-native/archive/v1.3.0.zip", zipFile)
//        File unzipFolder = new File(buildDir, "kndist")
//
//        project.copy { CopySpec cp ->
//            cp.from project.zipTree(zipFile)
//            cp.into unzipFolder
//        }
//    }
//}

task build {
    dependsOn 'distTlRuntime'
}

task buildCopy(type: Copy){
  from(project.buildDir)
  into('../bcdist')
}

build.finalizedBy(buildCopy)

//task hostRuntime(dependsOn: "${hostName}Runtime")

task clean {
    doLast {
        delete buildDir
        delete '../bcdist'
    }
}
